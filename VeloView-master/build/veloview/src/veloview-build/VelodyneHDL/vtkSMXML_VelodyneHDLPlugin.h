// Loadable modules
//
// Generated by ../../../../paraview/src/paraview-build/bin/vtkkwProcessXML-pv4.3
//
#ifndef __vtkSMXML_VelodyneHDLPlugin_h
#define __vtkSMXML_VelodyneHDLPlugin_h

#include <string.h>


// From file /home/marko/research/VeloView-master/VelodyneHDL/xml/ApplanixPositionReader.xml
static const char* const VelodyneHDLPluginApplanixPositionReaderInterfaces0 =
"<ServerManagerConfiguration>\n"
"  <!-- Begin ApplanixReader -->\n"
"  <ProxyGroup name=\"sources\">\n"
"    <SourceProxy name=\"ApplanixPositionReader\" class=\"vtkApplanixPositionReader\" label=\"Applanix Position Reader\">\n"
"      <Documentation\n"
"        short_help=\"Read Applanix data files.\"\n"
"        long_help=\"Read Applanix data files.\">\n"
"        Read Applanix data files.\n"
"      </Documentation>\n"
"\n"
"      <StringVectorProperty\n"
"          name=\"FileName\"\n"
"          animateable=\"0\"\n"
"          command=\"SetFileName\"\n"
"          number_of_elements=\"1\">\n"
"          <FileListDomain name=\"files\"/>\n"
"          <Documentation>\n"
"            This property specifies the file name for the reader.\n"
"          </Documentation>\n"
"      </StringVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"          name=\"BaseYaw\"\n"
"          animateable=\"0\"\n"
"          default_values=\"0.0\"\n"
"          command=\"SetBaseYaw\"\n"
"          number_of_elements=\"1\">\n"
"          <Documentation>\n"
"            This property specifies the \"base\" yaw orientation of the GPS\n"
"            sensor. The value is subtracted from the reported yaw to get\n"
"            actual yaw.\n"
"          </Documentation>\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"          name=\"BaseRoll\"\n"
"          animateable=\"0\"\n"
"          default_values=\"0.0\"\n"
"          command=\"SetBaseRoll\"\n"
"          number_of_elements=\"1\">\n"
"          <Documentation>\n"
"            This property specifies the \"base\" roll orientation of the GPS\n"
"            sensor. The value is subtracted from the reported roll to get\n"
"            actual roll.\n"
"          </Documentation>\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"          name=\"BasePitch\"\n"
"          animateable=\"0\"\n"
"          default_values=\"0.0\"\n"
"          command=\"SetBasePitch\"\n"
"          number_of_elements=\"1\">\n"
"          <Documentation>\n"
"            This property specifies the \"base\" pitch orientation of the GPS\n"
"            sensor. The value is subtracted from the reported pitch to get\n"
"            actual pitch.\n"
"          </Documentation>\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <Hints>\n"
"        <ReaderFactory extensions=\"txt\"\n"
"           file_description=\"Applanix Data File\"/>\n"
"      </Hints>\n"
"\n"
"    </SourceProxy>\n"
"  </ProxyGroup>\n"
"  <!-- End ApplanixReader -->\n"
"</ServerManagerConfiguration>\n"
"\n";
// Get single string
char* VelodyneHDLPluginApplanixPositionReaderInterfaces()
{
  size_t len = ( 0
    + strlen(VelodyneHDLPluginApplanixPositionReaderInterfaces0) );
  char* res = new char[ len + 1];
  res[0] = 0;
  strcat(res, VelodyneHDLPluginApplanixPositionReaderInterfaces0);
  return res;
}


// From file /home/marko/research/VeloView-master/VelodyneHDL/xml/ProcessingSample.xml
static const char* const VelodyneHDLPluginProcessingSampleInterfaces0 =
"<ServerManagerConfiguration>\n"
"  <ProxyGroup name=\"filters\">\n"
"    <SourceProxy name=\"ProcessingSample\" class=\"vtkProcessingSample\" label=\"Processing Sample\">\n"
"      <Documentation\n"
"         short_help=\"Apply example of processing to point cloud data.\"\n"
"         long_help=\"Apply example of processing to point cloud data.\">\n"
"      </Documentation>\n"
"\n"
"      <InputProperty\n"
"         name=\"Input\"\n"
"         port_index=\"0\"\n"
"         command=\"SetInputConnection\">\n"
"        <ProxyGroupDomain name=\"groups\">\n"
"          <Group name=\"sources\"/>\n"
"          <Group name=\"filters\"/>\n"
"        </ProxyGroupDomain>\n"
"        <DataTypeDomain name=\"input_type\">\n"
"          <DataType value=\"vtkPolyData\"/>\n"
"        </DataTypeDomain>\n"
"        <Documentation>\n"
"          Set the input poly data\n"
"        </Documentation>\n"
"      </InputProperty>\n"
"   </SourceProxy>\n"
"  </ProxyGroup>\n"
"</ServerManagerConfiguration>\n"
"\n";
// Get single string
char* VelodyneHDLPluginProcessingSampleInterfaces()
{
  size_t len = ( 0
    + strlen(VelodyneHDLPluginProcessingSampleInterfaces0) );
  char* res = new char[ len + 1];
  res[0] = 0;
  strcat(res, VelodyneHDLPluginProcessingSampleInterfaces0);
  return res;
}


// From file /home/marko/research/VeloView-master/VelodyneHDL/xml/VelodyneHDLGridSource.xml
static const char* const VelodyneHDLPluginVelodyneHDLGridSourceInterfaces0 =
"<ServerManagerConfiguration>\n"
"  <!-- Begin vtkVelodyneHDLGridSource -->\n"
"  <ProxyGroup name=\"sources\">\n"
"    <SourceProxy name=\"VelodyneHDLGridSource\" class=\"vtkVelodyneHDLGridSource\" label=\"Velodyne HDL Grid Source\">\n"
"      <Documentation\n"
"        short_help=\"Generates a vtkPolyData measurement grid plane.\"\n"
"        long_help=\"Generates a vtkPolyData measurement grid plane.\">\n"
"        Generates a vtkPolyData measurement grid plane.\n"
"      </Documentation>\n"
"\n"
"\n"
"      <IntVectorProperty\n"
"        name=\"GridSize\"\n"
"        command=\"SetGridSize\"\n"
"        number_of_elements=\"1\"\n"
"        default_values=\"10\">\n"
"      </IntVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"        name=\"Scale\"\n"
"        command=\"SetScale\"\n"
"        number_of_elements=\"1\"\n"
"        default_values=\"10.0\">\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"        name=\"Origin\"\n"
"        command=\"SetOrigin\"\n"
"        number_of_elements=\"3\"\n"
"        default_values=\"0.0 0.0 0.0\">\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"        name=\"Normal\"\n"
"        command=\"SetNormal\"\n"
"        number_of_elements=\"3\"\n"
"        default_values=\"0.0 0.0 1.0\">\n"
"      </DoubleVectorProperty>\n"
"\n"
"    </SourceProxy>\n"
"  </ProxyGroup>\n"
"  <!-- End vtkVelodyneHDLGridSource -->\n"
"</ServerManagerConfiguration>\n"
"\n";
// Get single string
char* VelodyneHDLPluginVelodyneHDLGridSourceInterfaces()
{
  size_t len = ( 0
    + strlen(VelodyneHDLPluginVelodyneHDLGridSourceInterfaces0) );
  char* res = new char[ len + 1];
  res[0] = 0;
  strcat(res, VelodyneHDLPluginVelodyneHDLGridSourceInterfaces0);
  return res;
}


// From file /home/marko/research/VeloView-master/VelodyneHDL/xml/VelodyneHDLReader.xml
static const char* const VelodyneHDLPluginVelodyneHDLReaderInterfaces0 =
"<ServerManagerConfiguration>\n"
"  <!-- Begin VelodyneHDLReader -->\n"
"  <ProxyGroup name=\"sources\">\n"
"    <SourceProxy name=\"VelodyneHDLReader\" class=\"vtkVelodyneHDLReader\" label=\"Velodyne HDL Reader\">\n"
"      <Documentation\n"
"        short_help=\"Read Velodyne HDL data files.\"\n"
"        long_help=\"Read Velodyne HDL data files.\">\n"
"        Read Velodyne HDL data files.\n"
"      </Documentation>\n"
"\n"
"      <StringVectorProperty\n"
"          name=\"FileName\"\n"
"          animateable=\"0\"\n"
"          command=\"SetFileName\"\n"
"          number_of_elements=\"1\">\n"
"          <FileListDomain name=\"files\"/>\n"
"          <Documentation>\n"
"            This property specifies the file name for the reader.\n"
"          </Documentation>\n"
"      </StringVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"NumberOfTrailingFrames\"\n"
"          animateable=\"0\"\n"
"          command=\"SetNumberOfTrailingFrames\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Number of frames behind the current frame to show\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"<!--\n"
"     <IntVectorProperty\n"
"          name=\"LaserSelection\"\n"
"          animateable=\"0\"\n"
"          command=\"SetLaserSelection\"\n"
"          default_values=\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n"
"          number_of_elements=\"64\">\n"
"        <Documentation>\n"
"          Number of frames behind the current frame to show\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"-->\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"DummyProperty\"\n"
"          animateable=\"0\"\n"
"          command=\"SetDummyProperty\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          A dummy property to get the filter to refresh\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"DualReturnFilter\"\n"
"          animateable=\"0\"\n"
"          command=\"SetDualReturnFilter\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Filter mask for dual return\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"PointsSkip\"\n"
"          animateable=\"0\"\n"
"          command=\"SetPointsSkip\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Skip points set to 2 or higher\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"CropReturns\"\n"
"          animateable=\"0\"\n"
"          command=\"SetCropReturns\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Crop returns\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"CropInside\"\n"
"          animateable=\"0\"\n"
"          command=\"SetCropInside\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Crop inside\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"          name=\"CropRegion\"\n"
"          animateable=\"0\"\n"
"          command=\"SetCropRegion\"\n"
"          default_values=\"0 0 0 0 0 0\"\n"
"          number_of_elements=\"6\">\n"
"        <Documentation>\n"
"          Region in which to crop (exclude) returns\n"
"        </Documentation>\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"ApplyTransform\"\n"
"          animateable=\"0\"\n"
"          command=\"SetApplyTransform\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Apply geolocation data\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <StringVectorProperty\n"
"          name=\"CorrectionsFile\"\n"
"          label=\"Calibration File\"\n"
"          animateable=\"0\"\n"
"          command=\"SetCorrectionsFile\"\n"
"          number_of_elements=\"1\">\n"
"          <FileListDomain name=\"files\"/>\n"
"          <Documentation>\n"
"            This property specifies the corrections file for a 64 laser sensor.\n"
"          </Documentation>\n"
"      </StringVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"                name=\"TimestepValues\"\n"
"                information_only=\"1\" >\n"
"                <TimeStepsInformationHelper/>\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <IntVectorProperty command=\"GetNumberOfChannels\"\n"
"                         information_only=\"1\"\n"
"                         name=\"NumberOfChannels\">\n"
"        <SimpleIntInformationHelper />\n"
"      </IntVectorProperty>\n"
"\n"
"      <Hints>\n"
"        <ReaderFactory extensions=\"pcap\"\n"
"           file_description=\"Velodyne HDL Data File\"/>\n"
"      </Hints>\n"
"\n"
"    </SourceProxy>\n"
"  </ProxyGroup>\n"
"  <!-- End VelodyneHDLReader -->\n"
"</ServerManagerConfiguration>\n"
"\n";
// Get single string
char* VelodyneHDLPluginVelodyneHDLReaderInterfaces()
{
  size_t len = ( 0
    + strlen(VelodyneHDLPluginVelodyneHDLReaderInterfaces0) );
  char* res = new char[ len + 1];
  res[0] = 0;
  strcat(res, VelodyneHDLPluginVelodyneHDLReaderInterfaces0);
  return res;
}


// From file /home/marko/research/VeloView-master/VelodyneHDL/xml/VelodyneHDLPositionReader.xml
static const char* const VelodyneHDLPluginVelodyneHDLPositionReaderInterfaces0 =
"<ServerManagerConfiguration>\n"
"  <!-- Begin VelodyneHDLReader -->\n"
"  <ProxyGroup name=\"sources\">\n"
"    <SourceProxy name=\"VelodyneHDLPositionReader\" class=\"vtkVelodyneHDLPositionReader\" label=\"Velodyne HDL Position Reader\">\n"
"      <Documentation\n"
"        short_help=\"Read Velodyne HDL data files.\"\n"
"        long_help=\"Read Velodyne HDL data files.\">\n"
"        Read Velodyne HDL data files.\n"
"      </Documentation>\n"
"\n"
"      <StringVectorProperty\n"
"          name=\"FileName\"\n"
"          animateable=\"0\"\n"
"          command=\"SetFileName\"\n"
"          number_of_elements=\"1\">\n"
"          <FileListDomain name=\"files\"/>\n"
"          <Documentation>\n"
"            This property specifies the file name for the reader.\n"
"          </Documentation>\n"
"      </StringVectorProperty>\n"
"\n"
"      <Hints>\n"
"        <ReaderFactory extensions=\"pcap\"\n"
"           file_description=\"Velodyne HDL Data File\"/>\n"
"      </Hints>\n"
"\n"
"    </SourceProxy>\n"
"  </ProxyGroup>\n"
"  <!-- End VelodyneHDLReader -->\n"
"</ServerManagerConfiguration>\n"
"\n";
// Get single string
char* VelodyneHDLPluginVelodyneHDLPositionReaderInterfaces()
{
  size_t len = ( 0
    + strlen(VelodyneHDLPluginVelodyneHDLPositionReaderInterfaces0) );
  char* res = new char[ len + 1];
  res[0] = 0;
  strcat(res, VelodyneHDLPluginVelodyneHDLPositionReaderInterfaces0);
  return res;
}


// From file /home/marko/research/VeloView-master/VelodyneHDL/xml/VelodyneHDLSource.xml
static const char* const VelodyneHDLPluginVelodyneHDLSourceInterfaces0 =
"<ServerManagerConfiguration>\n"
"  <ProxyGroup name=\"sources\">\n"
"    <SourceProxy name=\"VelodyneHDLSource\" class=\"vtkVelodyneHDLSource\" label=\"Velodyne HDL Source\">\n"
"      <Documentation\n"
"         short_help=\"Velodyne HDL Source\"\n"
"         long_help=\"Velodyne HDL Source\">\n"
"      </Documentation>\n"
"\n"
"      <StringVectorProperty\n"
"          name=\"CorrectionsFile\"\n"
"          animateable=\"0\"\n"
"          label=\"Calibration File\"\n"
"          command=\"SetCorrectionsFile\"\n"
"          number_of_elements=\"1\">\n"
"          <FileListDomain name=\"files\"/>\n"
"          <Documentation>\n"
"            This property specifies the corrections file for a 64 laser sensor.\n"
"          </Documentation>\n"
"      </StringVectorProperty>\n"
"\n"
"      <StringVectorProperty\n"
"          name=\"OutputFile\"\n"
"          animateable=\"0\"\n"
"          command=\"SetOutputFile\"\n"
"          number_of_elements=\"1\">\n"
"          <FileListDomain name=\"files\"/>\n"
"          <Documentation>\n"
"            This property specifies the output packet file for writing.\n"
"          </Documentation>\n"
"      </StringVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"CropReturns\"\n"
"          animateable=\"0\"\n"
"          command=\"SetCropReturns\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Crop returns\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"CropInside\"\n"
"          animateable=\"0\"\n"
"          command=\"SetCropInside\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Crop inside\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <DoubleVectorProperty\n"
"          name=\"CropRegion\"\n"
"          animateable=\"0\"\n"
"          command=\"SetCropRegion\"\n"
"          default_values=\"0 0 0 0 0 0\"\n"
"          number_of_elements=\"6\">\n"
"        <Documentation>\n"
"          Region in which to crop (exclude) returns\n"
"        </Documentation>\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"DummyProperty\"\n"
"          animateable=\"0\"\n"
"          command=\"SetDummyProperty\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          A hack to get the filter to refresh, since I cant get the LaserSelection to wrap correctly\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"          name=\"DualReturnFilter\"\n"
"          animateable=\"0\"\n"
"          command=\"SetDualReturnFilter\"\n"
"          default_values=\"0\"\n"
"          number_of_elements=\"1\">\n"
"        <Documentation>\n"
"          Filter mask for dual return\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <Property\n"
"        name=\"Poll\"\n"
"        command=\"Poll\" />\n"
"\n"
"      <Property\n"
"        name=\"ReadNextFrame\"\n"
"        command=\"ReadNextFrame\" />\n"
"\n"
"      <Property\n"
"        name=\"Start\"\n"
"        command=\"Start\" />\n"
"\n"
"      <Property\n"
"        name=\"Stop\"\n"
"        command=\"Stop\" />\n"
"\n"
"      <DoubleVectorProperty\n"
"          name=\"TimestepValues\"\n"
"          repeatable=\"1\"\n"
"          information_only=\"1\">\n"
"        <TimeStepsInformationHelper/>\n"
"      </DoubleVectorProperty>\n"
"\n"
"      <IntVectorProperty\n"
"        name=\"CacheSize\"\n"
"        command=\"SetCacheSize\"\n"
"        number_of_elements=\"1\"\n"
"        default_values=\"500\">\n"
"        <Documentation>\n"
"        The cache size determines how many timesteps of data will be saved\n"
"        by this source.  A cache size of zero indicates an unlimited size.\n"
"        </Documentation>\n"
"      </IntVectorProperty>\n"
"\n"
"      <IntVectorProperty command=\"GetNumberOfChannels\"\n"
"                         information_only=\"1\"\n"
"                         name=\"NumberOfChannels\">\n"
"        <SimpleIntInformationHelper />\n"
"      </IntVectorProperty>\n"
"\n"
"   </SourceProxy>\n"
"  </ProxyGroup>\n"
"</ServerManagerConfiguration>\n"
"\n";
// Get single string
char* VelodyneHDLPluginVelodyneHDLSourceInterfaces()
{
  size_t len = ( 0
    + strlen(VelodyneHDLPluginVelodyneHDLSourceInterfaces0) );
  char* res = new char[ len + 1];
  res[0] = 0;
  strcat(res, VelodyneHDLPluginVelodyneHDLSourceInterfaces0);
  return res;
}



#endif
